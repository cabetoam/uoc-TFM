package com.confirming.oportunidades.resources;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Optional;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.confirming.oportunidades.repository.DynamicQuery;
import com.confirming.oportunidades.repository.InversionRepository;
import com.confirming.oportunidades.model.Factura;
import com.confirming.oportunidades.model.InsertResult;
import com.confirming.oportunidades.model.Inversion;
import com.confirming.oportunidades.model.Oportunidad;
import com.confirming.oportunidades.repository.OportunidadesRepository;


@RestController
public class OportunidadesController {
	
	@Autowired
	private OportunidadesRepository oportunidadesRepository;
	
	@Autowired
	private InversionRepository inversionRepository;
	
	
	@PostMapping(path="/findOportunidades", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<Oportunidad> findOportunidades(@RequestParam("moneda") String moneda, @RequestParam("monto") double monto) {
		List<Oportunidad> oportunidad = new ArrayList<Oportunidad>();
		// NumberFormat numberFormat = NumberFormat.getInstance(Locale.US);

		System.out.println(" moneda : " + moneda);
		System.out.println(" monto : " + monto);
		
		final DynamicQuery dynamicQuery = new DynamicQuery();
		
		dynamicQuery.setMoneda(moneda);
		dynamicQuery.setMonto(monto);
		oportunidad = oportunidadesRepository.queryOportunidades(dynamicQuery);
		System.out.println(" monto : " + oportunidad.get(0).getPlazoPago());
		System.out.println(" monto2 : " + oportunidad.size());
		return oportunidad;		
	}
	
	
	@PostMapping("/addInversion")
	public InsertResult saveInversion(@RequestBody Inversion inversion) {
		NumberFormat numberFormat = NumberFormat.getCurrencyInstance(Locale.US);
		System.out.println("Valor Compra : " + numberFormat.format(inversion.getValorCompra()));
		System.out.println("Ganancia : " + numberFormat.format(inversion.getGanancia()));

		inversion.setId(ObjectId.get().toString());
		InsertResult insertResult = new InsertResult();
		inversionRepository.save(inversion);
		insertResult.setInsertR("Ok");
		insertResult.setError("no error");
		return insertResult;
	}
}
